//+------------------------------------------------------------------+
//|                                    Copyright © 2018, Cédric Noël | 
//|                                             http://cedricnoel.fr |
//+------------------------------------------------------------------+
//|                                      Developed by : Cédric Noël  |
//|                                    cedric.noel.paris@gmail.com   |
//+------------------------------------------------------------------+
//| This file is a custom template for MT4 Expert advisor            |
//| developpement                                                    |
//+------------------------------------------------------------------+

#property copyright "Copyright © 2018, Cédric Noël"
#property link      "http://cedricnoel.fr"
#property version   "0.1.0"
#property strict

extern string StartTime       = "000000"; // Start time in hhmmss format
extern string EndTime         = "235959"; // End time in hhmmss format

extern int MagicNumber      = 12345;
extern bool SignalMail      = False;
extern double Lots          = 1.0;
extern int Slippage         = 3;
extern bool UseStopLoss     = True;
extern int StopLoss         = 30;
extern bool UseTakeProfit   = False;
extern int TakeProfit       = 0;
extern bool UseTrailingStop = True;
extern int TrailingStop     = 30;

extern int SMAShort  = 10;
extern int SMALong   = 40;
extern int ATRPeriod = 20;
extern int ATRShift  = 11;

extern bool isSizingOn = true; // Do we use auto sizing position
extern double Risk     = 1;    // In percent

//+------------------------------------------------------------------+
//| Enumerations                                                     |
//+------------------------------------------------------------------+
enum IncreaseType
{
    IncreasePercent, // %
    IncreasePips     // Pips
};

enum StopLimitType
{
    StopLimitPercent, // %
    StopLimitPips,    // Pips
    StopLimitDollar   // $
};

enum ExitType
{
    ExitSLTP,    // Exit only by Stop loss or Take profit triggers, no reversals
    ExitReversal // Reverse order if conditions for reverse order met
};

enum PositionSizeType
{
    PositionSizeAmount,   // $
    PositionSizeContract, // In contracts
    PositionSizeEquity    // % of equity
};

enum PositionDirection
{
    DirectLogic,  // Direct
    ReversalLogic // Reversal
};

enum OrderSide
{
    BuySide,
    SellSide
};

//+------------------------------------------------------------------+
//| OrderBuilder class                                               |
//+------------------------------------------------------------------+
//| Class used to create orders                                      |
//+------------------------------------------------------------------+
class OrderBuilder
{
    OrderSide _orderSide;
    string _instrument;
    double _amount;
    double _rate;
    int _slippage;
    double _stop;
    double _limit;
    int _magicNumber;

    public:
    OrderBuilder *SetSide(const OrderSide orderSide)
    {
        _orderSide = orderSide;
        return &this;
    }
    
    OrderBuilder *SetInstrument(const string instrument)
    {
        _instrument = instrument;
        return &this;
    }
    
    OrderBuilder *SetAmount(const double amount)
    {
        _amount = amount;
        return &this;
    }
    
    OrderBuilder *SetRate(const double rate)
    {
        _rate = NormalizeDouble(rate, Digits);
        return &this;
    }
    
    OrderBuilder *SetSlippage(const int slippage)
    {
        _slippage = slippage;
        return &this;
    }
    
    OrderBuilder *SetStop(const double stop)
    {
        _stop = NormalizeDouble(stop, Digits);
        return &this;
    }
    
    OrderBuilder *SetLimit(const double limit)
    {
        _limit = NormalizeDouble(limit, Digits);
        return &this;
    }
    
    OrderBuilder *SetMagicNumber(const int magicNumber)
    {
        _magicNumber = magicNumber;
        return &this;
    }
    
    int Execute()
    {
        int orderType;
        if (_orderSide == BuySide)
        {
            orderType = _rate > Ask ? OP_BUYSTOP : OP_BUYLIMIT;
        }
        else
        {
            orderType = _rate < Bid ? OP_SELLSTOP : OP_SELLLIMIT;
        }
        double minstoplevel=MarketInfo(_instrument,MODE_STOPLEVEL); 
        
        Print("Creating " + (_orderSide == BuySide ? "buy" : "sell")
            + " order at " + DoubleToStr(_rate, Digits) 
            + ". Amount: " + DoubleToStr(_amount, 2)
            + ". Stop: " + DoubleToStr(_stop, Digits)
            + ". Limit: " + DoubleToStr(_limit, Digits));
        int order = OrderSend(_instrument, orderType, _amount, _rate, _slippage, _stop, _limit, NULL, _magicNumber);
        if (order == -1)
        {
            int error = GetLastError();
            switch (error)
            {
                case 4109:
                    Print("Trading is not allowed");
                    break;
                case 130:
                    Print("Failed to create order: stoploss/takeprofit is too close");
                    break;
                default:
                    Print("Failed to create order: " + IntegerToString(error));
                    break;
            }
        }
        return order;
    }
};

//+------------------------------------------------------------------+
//| TradeController class                                            |
//+------------------------------------------------------------------+
class TradeController
{
	//+------------------------------------------------------------------+
	//| Class attributes                                                 |
	//+------------------------------------------------------------------+
	string _symbol;
    double _point;
    datetime _lastbartime;
    int _digit;
    double _mult;
    datetime _lastCloseTime;

	public:
	//+------------------------------------------------------------------+
	//| Parametric constructor                                           |
	//+------------------------------------------------------------------+
	TradeController(const string symbol)
    {
        _symbol = symbol;
        _point = MarketInfo(_symbol, MODE_POINT);
        _digit = (int)MarketInfo(_symbol, MODE_DIGITS); 
        _mult = _digit == 3 || _digit == 5 ? 10 : 1;
        _lastCloseTime = iTime(_symbol, TF, 0);
    }

    //+------------------------------------------------------------------+
	//| Default constructor                                              |
	//+------------------------------------------------------------------+
	~TradeController()
    {
    }

    void DoTrading()
    {

    }

	private: 
	//+------------------------------------------------------------------+
	//| IsBuyCondition function                                          |
	//+------------------------------------------------------------------+
	bool IsBuyCondition()
	{

	}

	//+------------------------------------------------------------------+
	//| IsSellCondition function                                         |
	//+------------------------------------------------------------------+
	bool IsSellCondition()
	{

	}
}

//+------------------------------------------------------------------+
//| TradeController class                                            |
//+------------------------------------------------------------------+
//| Description                                                      |
//+------------------------------------------------------------------+
int ParseTime(const string time)
{
    int time_parsed = StrToInteger(time);
    int seconds = time_parsed % 100;

    if (seconds > 59) {
        Print("Incorrect number of seconds in " + time);
        return -1;
    }
    time_parsed /= 100;

    int minutes = time_parsed % 100;

    if (minutes > 59) {
        Print("Incorrect number of minutes in " + time);
        return -1;
    }
    time_parsed /= 100;

    int hours = time_parsed % 100;

    if (hours > 23) {
        Print("Incorrect number of hours in " + time);
        return -1;
    }

    return (hours * 60 + minutes) * 60 + seconds;
}

//+------------------------------------------------------------------+
//| Script execution section                                         |
//+------------------------------------------------------------------+

int start_time;
int end_time;

//+------------------------------------------------------------------+
//| IsTradingTime function.                                          |
//+------------------------------------------------------------------+
//| Define if we are in the defined time interval to trade           |
//+------------------------------------------------------------------+
bool IsTradingTime()
{
    MqlDateTime current_time;
    TimeLocal(current_time);

    int current_t = (current_time.hour * 60 + current_time.min) * 60 + current_time.sec;

    if (start_time == end_time)
        return true;
    
    if (start_time > end_time)
        return current_t >= start_time || current_t <= end_time;
    
    return current_t >= start_time && current_t <= end_time;
}

//+------------------------------------------------------------------+
//| OnInit function.                                                 |
//+------------------------------------------------------------------+
//| Run on script initialization.                                    |
//+------------------------------------------------------------------+
int OnInit()
{
    start_time = ParseTime(StartTime);
    end_time   = ParseTime(EndTime);

    if (start_time == -1 || end_time == -1)
    {
        return 0;
    }

    tradingLogic = new TradeController(_Symbol);

    return INIT_SUCCEEDED;
}

void OnDeinit(const int reason)
{
    delete tradingLogic;
}

TradeController *tradingLogic;

void OnTick()
{
    if (!IsTradingTime())
    {
        return;
    }
    tradingLogic.DoTrading();
}






